# /usr/bin/python3
# Author: RashidKhan Pathan (iHexCoder)
# Version: 2.0
# Project: Pencrypt: a Framework for Web, Linux, Windows Pentesting and Cryptographic Operations, Exploit Development and Reverse Engineering, Malware Analysis
# Note: If You are Custmizing this Framework then please give credit to the original Author
# Warning: This Framework is only for Educational Purposes, Author will not responsible for any kind of illegel activity
# This Framework is in Beta Currently, But you can also add your own features in it


try:
    import os
    from pprint import pprint
    from urllib.request import urlopen
    import base64
    import requests
    import pyfiglet
    import sys
    import nmap
    import threading
    import socket
    import time
    import re
    import urllib.request
    import urllib.error
    import urllib.parse
    from bs4 import BeautifulSoup
    import os
    from urllib.parse import urlsplit
    import socket
    import requests
    import string
    import http.cookiejar
    from random import Random
    import sys
    import time
    import hashlib
    import uuid
    import scapy
    from PyPDF2 import PdfFileReader
    from PIL import Image
    from PIL.ExifTags import TAGS
    import re
    import io
    import pefile
    import struct
    import os.path
except ModuleNotFoundError as e:
    print("Modules Not Found, Please Install Requirements Manually")

# Custom Module

banner = pyfiglet.figlet_format("Pencrypt ")
print(banner)
print("[+]::Developed By : RashidKhan Pathan (iHexCoder)::[+]")
print("Pencrypt is specially designed for automation tasks of Pentesting, Bug Hunting, Forensic Investigation & "
      "Cryptographic Operations")
print("Version: 2.0 Beta")
print("Warning: This tool is Only for Education Purposes, Developer will not Responsible for any kind of illegal "
      "Activity")


class Pencrypt:
    def PencryptMenus(self):
        option = input("""\n
            [+] Select Option >
             1: Web Hacking
             2: Linux Hacking
             3: Windows Hacking
             4: Macintosh Hacking
             5: Cryptography
             6: Exploit Development and Reverse Engineering
             7: Malware Analysis
             8: Forensic Investigation
             9: About Developer
            10: Back Menu
             Enter Option:
        """)
        print("Selected ", option)

        if option == "1":
            self.WebHacking()
        elif option == "2":
            self.LinuxHacking()
        elif option == "3":
            self.WindowsHacking()
        elif option == "4":
            self.MacintoshHacking()
        elif option == "5":
            self.ACryptography()
        elif option == "6":
            self.ExploitDevelopmentandReverseEngineering()
        elif option == "7":
            self.MalwareAnalysis()
        elif option == "8":
            self.ForensicInvestigation()
        elif option == "9":
            pass
        elif option == "10":
            self.BackMenus()

    def BackMenus(self):
        return self.PencryptMenus()

    #################################
    #                               #
    #         Web Hacking           #
    #                               #
    #################################

    def WebHacking(self):
        print("Hello")
        menus = input("""
         1: SQL Injection Scanner
         2: Subdomain Scanner
         3: Remote Code Execution Scanner
         4: SSRF Scanner
         5: Port Scanner
         6: Base64 Encoder | Decoder
         7: Informtion Gathering
         8: Admin Panel Finder
         9: XSS  Vulnerability Scanner
        10: CSRF Vulnerability Scanner
        11: CLRF Vulnerability Scanner
        12: CORS Vulnerability Scanner
        13: XXE Scanner
        14: LFI Scanner
        15: HTTP request smuggling Scanner
        16: HTTP Host header attacks
        17: Directory traversal
        18: Access Control Vulnerabilities
        19: Web Cache Poisoning
        20: Insecure Deserialization
        21: Business Logic Vulnerabilities
        22: Server-Side Template Injection
        23: Password Attack  """)
        print("Selected", menus)

        if menus == "1" or menus == 1:
            sqlinjectionmenus = input("""1: Default SQL Injection Scanner
                                         2: Custom SQL Injection Scanner""")
            print("Selected", sqlinjectionmenus)

            if sqlinjectionmenus == 1 or sqlinjectionmenus == "1":
                if os.system("sqlmap") == True:
                    print("Sqlmap Installed")
                elif os.system("sudo apt-get install sqlmap"):
                    print("[+] Installing SQLMAP Please Wait")
                else:
                    enter_domain = input("Enter Domain: ")
                    scan = os.system(
                        "sqlmap -u" + enter_domain + "--batch --dbs --tables")
                    print(scan)

            elif sqlinjectionmenus == 2 or sqlinjectionmenus == "2":
                url = input("Enter URL to Scan: ")

                def detect(url):
                    f = open("sqlpayloads.txt",  "r")
                    payloads = f.read().splitlines()
                    for item in payloads:
                        url_mod = url.replace("INJECT_HERE", item)
                        http_request = requests.get(url_mod)
                        if http_request.content.find(b"MySQL") != -1:
                            print(
                                url_mod + colored(" – potential error based SQLi detected", "red"))
                        else:
                            print(
                                url_mod + colored(" – no injection found", "green"))
                    detect(url)
                    self.WebHacking()
                    self.PencryptMenus()

        if menus == "2" or menus == 2:

            def subdomain_scanner():
                # Make Sure all Tools are Installed in Your System
                # if != then we gonna install
                subdomainmenus = input(
                    """
                                 1: Using Subfinder
                                 2: Using Amass
                                 3: Using Subbrute
                                 4: Using Default
                                 """)
                print("[+] Selected", subdomainmenus)

                # Cheking The Requirements
                if subdomainmenus == 1 or subdomainmenus == "1":
                    subf_domain = input("Enter Domain: ")
                    os.system("subfinder -d" + subf_domain + "-o domains.txt")

                elif subdomainmenus == 2 or subdomainmenus == "2":
                    domain = input("Enter Domain: ")
                    os.system("amass enum -d " + domain)
                    os.system("subbrute")

                elif subdomainmenus == 3 or subdomainmenus == "3":
                    subruite_domain = input("Enter Domain")
                    os.system(subruite_domain)

                elif subdomainmenus == 4 or subdomainmenus == "4":
                    domain = input("Enter Any Subdomain to Scan: ")
                    subdomains = open("subdomains.txt").read().splitlines()
                    for subdomain in subdomains:
                        url = f"http://{subdomain}.{domain}"
                        try:
                            requests.get(url)
                        except requests.ConnectionError:
                            pass
                        else:
                            print("[+] Subdomain Found : ", url)

            subdomain_scanner()
            self.WebHacking()

        if menus == "3" or menus == 3:
            print("[+] Remote Code Execution Scanner")

        if menus == "4" or menus == 4:
            # Burpsuite Professinal Should be Installed
            print("[+] SSRF Scanner")

            # globals
            global action
            global crawler
            global form
            global init1
            global request
            global Form_Debugger
            global Uri_Checker
            global Crawler_Handler

            def request(referer, action, form, opener, cookie):

                data = urllib.parse.urlencode(form)
                if cookie != '':
                    headers = {
                        'User-Agent': 'Mozilla/5.0 (Windows NT 5.2; en-US; rv:1.9.1.3) Gecko/20090824 Firefox/3.5.3 (.NET CLR 3.5.30729)',
                        'Set-Cookie': cookie,
                        'Referer': referer
                    }
                else:
                    headers = {
                        'User-Agent': 'Mozilla/5.0 (Windows NT 5.2; en-US; rv:1.9.1.3) Gecko/20090824 Firefox/3.5.3 (.NET CLR 3.5.30729)',
                        'Referer': referer
                    }
                try:
                    return opener.open(action, data).read()

                except urllib.error.HTTPError:
                    print("[ERROR] HTTP Error 1 : "+action)
                    return

                except ValueError:
                    print("[ERROR] Value Error : "+action)
                    return

                except Exception as e:
                    return ("[ERROR] ", e,  action)

            def inputin():

                web = input('[INPUT] Enter target address :> ')
                if 'https' in web:
                    web = web.split('//')[1]
                if 'http' not in web:
                    web = 'http://' + web

                web0 = web.split('//')[1]
                try:
                    print('[VERBOSE]', 'Testing site status...')
                    # test whether site is up or not
                    socket.gethostbyname(web0)
                    print('[Info] ', 'Site seems to be up!')

                except socket.gaierror:  # if site is down
                    print('[Info]', ' Site seems to be down...')
                    sys.exit(0)

                cook = input('[VERBOSE]  Got any cookies? ' +
                             '[Enter for None]'+' :> ')
                if web.endswith('/'):
                    return web, cook
                else:
                    web = web + '/'
                    return web, cook

            class Uri_Checker:
                def buildUrl(url, href):

                    exclusions = 'logout action=out action=logoff action=delete UserLogout osCsid file_manager.php'
                    if href == "http://localhost" or any((re.search(s, href)) for s in exclusions.split()):
                        return ''  # csrf stuff :o

                    url_parts = urlsplit(url)
                    href_parts = urlsplit(href)
                    app = ''

                    if href_parts.netloc == url_parts.netloc:
                        app = href  # assuming this url is built

                    else:
                        # parse result
                        if len(href_parts.netloc) == 0 and (len(href_parts.path) != 0 or len(href_parts.query) != 0):
                            domain = url_parts.netloc  # done!
                            if href_parts.path.startswith('/'):
                                app = 'http://' + domain + href_parts.path  # startpage dom
                            else:
                                try:
                                    app = 'http://' + domain + \
                                        re.findall(
                                            '(.*\/)[^\/]*', url_parts.path)[0] + href_parts.path
                                    # get real protocol urls
                                except IndexError:
                                    app = 'http://' + domain + href_parts.path
                            if href_parts.query:
                                app += '?' + href_parts.query  # parameters :D

                    return app

                def buildAction(url, action):

                    print('[VERBOSE]',  'Parsing URL parameters...')
                    if action and not re.match('#', action):
                        return buildUrl(url, action)
                    else:
                        return url

            buildUrl = Uri_Checker.buildUrl
            buildAction = Uri_Checker.buildAction

            class Form_Debugger():
                def prepareFormInputs(self, form):
                    print('[VERBOSE]', ' Crafting inputs as form type...')
                    print('[VERBOSE]', ' Parsing final inputs...')
                    input = dict()
                    print('[VERBOSE]', 'Processing' +
                          ' <input type="hidden" name="...')
                    for m in form.findAll('input', {'name': True, 'type': 'hidden'}):
                        if re.search(' value=', m.__str__()):
                            value = m['value'].encode('utf8')
                        else:
                            value = randString()
                        input[m['name']] = value

                    print('[VERBOSE]', 'Processing ' +
                          '<input type="test" name="...')
                    for m in form.findAll('input', {'name': True, 'type': 'text'}):
                        if re.search(' value=', m.__str__()):
                            value = m['value'].encode('utf8')
                        else:
                            value = randString()
                        input[m['name']] = value

                    print('[VERBOSE]', 'Processing' +
                          ' <input type="password" name="...')
                    for m in form.findAll('input', {'name': True, 'type': 'password'}):
                        if re.search(' value=', m.__str__()):
                            value = m['value'].encode('utf8')
                        else:
                            value = randString()
                        input[m['name']] = value

                    print('[VERBOSE]', ' Processing <input type="submit" name="...')
                    for m in form.findAll('input', {'name': True, 'type': 'submit'}):
                        if re.search(' value=', m.__str__()):
                            value = m['value'].encode('utf8')
                        else:
                            value = randString()
                        input[m['name']] = value

                    print('[VERBOSE]',
                          ' Processing <input type="checkbox" name="...')
                    for m in form.findAll('input', {'name': True, 'type': 'checkbox'}):
                        if re.search(' value=', m.__str__()):
                            value = m['value'].encode('utf-8')
                        else:
                            value = randString()
                        input[m['name']] = value

                    print('[VERBOSE]', ' Processing <input type="radio" name="...')
                    listRadio = []
                    for m in form.findAll('input', {'name': True, 'type': 'radio'}):
                        if (not m['name'] in listRadio) and re.search(' value=', m.__str__()):
                            listRadio.append(m['name'])
                            try:
                                input[m['name']] = value.encode('utf-8')
                            except:
                                input[m['name']] = value
                    print('[VERBOSE]', ' Processing <textarea name="...')
                    for m in form.findAll('textarea', {'name': True}):
                        if len(m.contents) == 0:
                            m.contents.append(randString())
                        try:
                            input[m['name']] = m.contents[0].encode('utf8')
                        except:
                            input[m['name']] = value
                    print('[VERBOSE]', 'Processing  <select name="...')
                    for m in form.findAll('select', {'name': True}):
                        if len(m.findAll('option', value=True)) > 0:
                            name = m['name']
                            input[name] = m.findAll('option', value=True)[
                                0]['value'].encode('utf8')

                    return input

            def randString():
                print('Compiling strings...')
                return ''.join(Random().sample(string.ascii_letters, 6))

            def getAllForms(soup):
                return soup.findAll('form', action=True, method=re.compile("post", re.IGNORECASE))

            class Crawler_Handler():

                def __init__(self, start, opener):

                    self.visited = []
                    self.toVisit = []
                    self.uriPatterns = []
                    self.currentURI = ''
                    self.opener = opener
                    self.toVisit.append(start)

                def __next__(self):
                    self.currentURI = self.toVisit[0]
                    self.toVisit.remove(self.currentURI)
                    return self.currentURI

                def getVisited(self):
                    return self.visited

                def getToVisit(self):
                    return self.toVisit

                def noinit(self):
                    if len(self.toVisit) > 0:
                        return True
                    else:
                        return False

                def addToVisit(self, Uri_Checker):
                    self.toVisit.append(Uri_Checker)

                def process(self, root):
                    url = self.currentURI

                    try:
                        query = self.opener.open(url)

                    except urllib.error.HTTPError as msg:
                        print('Request Error: '+msg.__str__())
                        if url in self.toVisit:
                            self.toVisit.remove(url)
                        return

                    if not re.search('html', query.info()['Content-Type']):
                        return

                    print('[Info] Making request to new location...')
                    if hasattr(query.info(), 'Location'):
                        url = query.info()['Location']
                    print('[I] Reading response...')
                    response = query.read()

                    try:
                        print('[Info] Trying to parse response...')
                        soup = BeautifulSoup(response,  'lxml')

                    except HTMLParser.HTMLParseError:
                        print('[Info] BeautifulSoup Error: '+url)
                        self.visited.append(url)

                        if url in self.toVisit:
                            self.toVisit.remove(url)
                        return

                    for m in soup.findAll('a', href=True):

                        app = ''
                        if not re.match(r'javascript:', m['href']) or re.match('http://', m['href']):
                            app = Uri_Checker.buildUrl(url, m['href'])

                        if app != '' and re.search(root, app):
                            while re.search(r'/\.\./', app):
                                p = re.compile('/[^/]*/../')
                                app = p.sub('/', app)
                            p = re.compile('\./')
                            app = p.sub('', app)

                            uriPattern = removeIDs(app)
                            if self.notExist(uriPattern) and app != url:
                                print('[VERBOSE]', '[ADDED]',	app)
                                self.toVisit.append(app)
                                self.uriPatterns.append(uriPattern)

                    self.visited.append(url)
                    return soup

                def getUriPatterns(self):
                    return self.uriPatterns

                def notExist(self, test):
                    if (test not in self.uriPatterns):
                        return 1
                    return 0

                def addUriPatterns(self, Uri_Checker):
                    self.uriPatterns.append(Uri_Checker)

                def addVisited(self, Uri_Checker):
                    self.visited.append(Uri_Checker)

            def removeIDs(Uri_Checker):

                p = re.compile('=[0-9]+')
                Uri_Checker = p.sub('=', Uri_Checker)
                p = re.compile('(title=)[^&]*')
                Uri_Checker = p.sub('\\1', Uri_Checker)
                return Uri_Checker

            class CSRF():
                def xsrf_main(web, cookie):
                    form1 = """<form action="/drupal/?q=node&amp;destination=node"  accept-charset="UTF-8" method="post" id="user-login-form">
                                <div><div class="form-item" id="edit-name-wrapper">
                                <label for="edit-name">Username: <span class="form-required" title="This field is required.">*</span></label>
                                <input type="text" maxlength="60" name="name" id="edit-name" size="15" value="test2" class="form-text required" />
                                </div>
                                <div class="form-item" id="edit-pass-wrapper">
                                <label for="edit-pass">Password: <span class="form-required" title="This field is required.">*</span></label>
                                <input type="password" value="a9z8e7" name="pass" id="edit-pass"  maxlength="60"  size="15"  class="form-text required" />
                                </div>
                                <input type="submit" name="op" id="edit-submit" value="Log in"  class="form-submit" />
                                <div class="item-list"><ul><li class="first"><a href="/drupal/?q=user/register" title="Create a new user account.">Create new account</a></li>
                                <li class="last"><a href="/drupal/?q=user/password" title="Request new password via e-mail.">Request new password</a></li>
                                </ul></div><input type="hidden" name="form_build_id" id="form-6a060c0861888b7321fab4f5ac6cb908" value="form-6a060c0861888b7321fab4f5ac6cb908"  />
                                <input type="hidden" name="form_id" id="edit-user-login-block" value="user_login_block"  />
                                </div></form> """
                    form2 = """<form action="/drupal/?q=node&amp;destination=node"  accept-charset="UTF-8" method="post" id="user-login-form">
                                <div><div class="form-item" id="edit-name-wrapper">
                                <label for="edit-name">Username: <span class="form-required" title="This field is required.">*</span></label>
                                <input type="text" maxlength="60" name="name" id="edit-name" size="15" value="test2" class="form-text required" />
                                </div>
                                <div class="form-item" id="edit-pass-wrapper">
                                <label for="edit-pass">Password: <span class="form-required" title="This field is required.">*</span></label>
                                <input type="password" value="a9z8e7" name="pass" id="edit-pass"  maxlength="60"  size="15"  class="form-text required" />
                                </div>
                                <input type="submit" name="op" id="edit-submit" value="Log in"  class="form-submit" />
                                <div class="item-list"><ul><li class="first"><a href="/drupal/?q=user/register" title="Create a new user account.">Create new account</a></li>
                                <li class="last"><a href="/drupal/?q=user/password" title="Request new password via e-mail.">Request new password</a></li>
                                </ul></div><input type="hidden" name="form_build_id" id="form-6a060c0861888b7321fab4f5ac6cb908" value="form-6a060c0861888b7321fab4f5ac6cb908"  />
                                <input type="hidden" name="form_id" id="edit-user-login-block" value="user_login_block"  />
                                </div></form> """

                    Cookie0 = http.cookiejar.CookieJar()
                    Cookie1 = http.cookiejar.CookieJar()
                    try:
                        resp1 = urllib.request.build_opener(
                            urllib.request.HTTPCookieProcessor(Cookie0))
                        resp2 = urllib.request.build_opener(
                            urllib.request.HTTPCookieProcessor(Cookie1))
                    except:
                        pass
                    actionDone = []

                    csrf = ''
                    init1 = web
                    form = Form_Debugger()

                    bs1 = BeautifulSoup(form1, 'lxml').findAll(
                        'form', action=True)[0]
                    bs2 = BeautifulSoup(form2, 'lxml').findAll(
                        'form', action=True)[0]

                    action = init1
                    try:
                        resp1.open(action)
                        resp2.open(action)
                    except:
                        pass
                    crawler = Crawler_Handler(init1, resp1)
                    print("[INFO] ' , 'Initializing crawling and scanning...")

                    try:

                        while crawler.noinit():
                            url = next(crawler)

                            print('[VERBOSE]', '[CRAWLER STATUS]', url)

                            try:
                                soup = crawler.process(web)
                                if not soup:
                                    continue
                                i = 0
                                print('[INFO] ', 'Retrieving all forms on ', url)
                                for m in getAllForms(soup):
                                    action = Uri_Checker.buildAction(
                                        url, m['action'])
                                    if not action in actionDone and action != '':
                                        try:
                                            result = form.prepareFormInputs(m)
                                            r1 = request(
                                                url, action, result, resp1, cookie)
                                            result = form.prepareFormInputs(m)
                                            r2 = request(
                                                url, action, result, resp2, cookie)

                                            if(len(csrf) > 0):
                                                if not re.search(csrf, r2):
                                                    print(
                                                        ' [+] CSRF vulnerability Detected : ', url+'!\n')
                                                    try:
                                                        if m['name']:
                                                            print(
                                                                '\n +---------+')
                                                            print(' |	PoC	|')
                                                            print(
                                                                ' +---------+\n')
                                                            print(
                                                                ' [+] URL : ' + url)
                                                            print(
                                                                ' [+] Name : ' + m['name'])
                                                            print(
                                                                ' [+] Action : ' + m['action'])

                                                    except KeyError:

                                                        print('\n +---------+')
                                                        print(' |	PoC	|')
                                                        print(' +---------+\n')
                                                        print(
                                                            ' [+] URL : ' + url)
                                                        print(
                                                            ' [+] Action : ' + m['action'])

                                                    print(
                                                        '[+] Code : '++urllib.parse.urlencode(result))

                                                continue

                                            o2 = resp2.open(url).read()

                                            try:
                                                form2 = getAllForms(
                                                    BeautifulSoup(o2, 'lxml'))[i]

                                            except IndexError:
                                                print('Form Error')
                                                continue

                                            print('[VERBOSE]',
                                                  'Preparing form inputs...')
                                            contents2 = form.prepareFormInputs(
                                                form2)
                                            r3 = request(
                                                url, action, contents2, resp2, cookie)

                                            try:
                                                checkdiff = difflib.ndiff(
                                                    r1.splitlines(1), r2.splitlines(1))
                                                checkdiff0 = difflib.ndiff(
                                                    r1.splitlines(1), r3.splitlines(1))

                                                result12 = []
                                                for n in checkdiff:
                                                    if re.match('\+|-', n):
                                                        result12.append(n)

                                                result13 = []
                                                for n in checkdiff0:
                                                    if re.match('\+|-', n):
                                                        result13.append(n)

                                                if len(result12) <= len(result13):
                                                    print(
                                                        'No CSRF Detected At : '+url)
                                                    time.sleep(0.3)
                                                    print(
                                                        'PoC of response and request...')
                                                    try:
                                                        if m['name']:
                                                            print(
                                                                '\n +---------+')
                                                            print(' |	PoC	|')
                                                            print(
                                                                ' +---------+\n')
                                                            print(
                                                                ' [+] URL : ' + url)
                                                            print(
                                                                ' [+] Name : ' + m['name'])
                                                            print(
                                                                ' [+] Action : ' + m['action'])

                                                    except KeyError:

                                                        print(
                                                            color.RED+'\n +---------+')
                                                        print(
                                                            color.RED+' |	PoC	|')
                                                        print(
                                                            color.RED+' +---------+\n')
                                                        print(
                                                            color.BLUE+' [+] URL : ' + color.CYAN+url)
                                                        print(
                                                            color.GREEN+' [+] Action : ' + color.END + m['action'])

                                                    print(
                                                        color.ORANGE+' [+] Code : '+color.END + urllib.parse.urlencode(result).strip())
                                                    print('')

                                            except KeyboardInterrupt:
                                                print(
                                                    '[INFO]', ' User Interrupt!')
                                                print('[INFO]', ' Aborted!')
                                                sys.exit(1)

                                            except:
                                                pass

                                        except urllib.error.HTTPError as msg:
                                            print('Exception : '+msg.__str__())

                                    actionDone.append(action)
                                    i += 1

                            except urllib.error.URLError:
                                print('[Exception] ', 'Raised for : '+url)
                                time.sleep(0.4)
                                print('[INFO] ', 'Moving on...')
                                continue

                        print('\n'+"Scan completed!"+'\n')

                    except urllib.error.HTTPError as e:
                        if str(e.code) == '403':
                            print('[INFO] ', 'HTTP Authentication Error!')
                            print('[INFO] ', 'Error Code : ' + str(e.code))
                            pass

                    except KeyboardInterrupt:
                        print('[INFO]', ' User Interrupt!')
                        print('[INFO] ', 'Aborted!')
                        sys.exit(1)

            web, cookie = inputin()
            CSRF.xsrf_main(web, cookie)
            self.WebHacking()

        if menus == 5 or menus == "5":
            nmap_option = input("""Select The Option: \n
                            [a] : Simple Port Scanner
                            [b] : Nmap Port Scanner\n Enter Option: """)
            for menus in nmap_option:
                if nmap_option == "a":
                    print("Simple Port Scanner")
                    target = input("Enter Target IP Address: ")

                    def portscan(port):
                        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                        s.settimeout(0.5)
                        try:
                            con = s.connect((target, port))
                            print('Port :', port, "is open.")
                            con.close()
                        except:
                            pass

                    r = 1
                    for x in range(1, 10000):
                        t = threading.Thread(
                            target=portscan, kwargs={'port': r})
                        r += 1
                        t.start()
                elif nmap_option == "b":
                    scanner = nmap.PortScanner()
                    print("Nmap Port Scanner")
                    ip_addr = input("Enter The IP to Scan: ")
                    print("This is Your IP: ", ip_addr)
                    type(ip_addr)
                    response = input("""\n
                                        [+] Select The Any Option
                                            1: SYN ACK SCAN
                                            2: UDP SCAN
                                            3: Super Scan
                                            4: Ping Scan CVE\nEnter Option: """)
                    print("Selected: ", response)
                    if response == "1":
                        print("Nmap Version", scanner.nmap_version())
                        scanner.scan(ip_addr, '1-1024', 'v -sS')
                        print(scanner.scaninfo())
                        print(scanner.scanstats())
                        print("Ip Status", scanner[ip_addr].state())
                        print(scanner[ip_addr].all_protocols())
                        print("Open Ports: ", scanner[ip_addr]['tcp'].keys())

                    if response == "2":
                        print("Nmap Version", scanner.nmap_version())
                        scanner.scan(ip_addr, '1-1024', '-v -sU')
                        print(scanner.scaninfo())
                        print(scanner.scanstats())
                        print("Ip Status", scanner[ip_addr].state())
                        print(scanner[ip_addr].all_protocols())
                        print("Open Ports: ", scanner[ip_addr]['tcp'].keys())

                    if response == '3':
                        print("Nmap Version: ", scanner.nmap_version())
                        scanner.scan(ip_addr, '1-1024', '-v -sS -sV -A -O')
                        print(scanner.scaninfo())
                        print("ip statu: ", scanner[ip_addr].state())
                        print(scanner[ip_addr].all_protocols())
                        print("open ports: ", scanner[ip_addr]['tcp'].keys())

                    if response == "4":
                        print("Add Ping Scan to Scan")
                    else:
                        self.WebHacking()

        if menus == 6 or menus == "6":
            print("Base64 Encoder & Decoder")
            select = input(
                """a: Encode | b: Decode\n [+] "Enter The Value to Encode or Decode: """)
            for menus in select:
                if select == "a":
                    print("Encoder")
                    string = input("Enter The Your String to Encode: ")
                    string_bytes = string.encode("ascii")
                    base64_bytes = base64.b64encode(string_bytes)
                    base64_string = base64_bytes.decode("ascii")
                    print(f"Encoded String: {base64_string}")
                    print("[+] Encoded Successfully")

                if select == "b":
                    print("Decoder")
                    base64_string = input(
                        "Enter The Encoded Value to Decode: ")
                    base64_bytes = base64_string.encode("ascii")
                    string_bytes = base64.b64decode(base64_bytes)
                    string = string_bytes.decode("ascii")
                    print("Decoded String: string}")
                    print("[+] Decoded Successfully")
                    self.WebHacking()

        if menus == 7 or menus == "7":
            print("[+] Information Gathering")
            print("")
            scan_menu = input("""
            [1] DNS Lookup
            [2] WHOIS
            [3] Reverse DNS Lookup
            [4] Subnet Lookup
            [5] GeoIP Lookup
            [6] Extract Links
            [7] Zone Transfer
            [8] HTTP Header
            [9] Host Finder
            [10] IP Locater
            [11] TraceRoute
            [12] Host DNS Finder
            [+] Enter Option:
            """)

            # Information Gathering
            for menu in scan_menu:
                print("Information Gathering")
                if menu == "1":
                    try:
                        input_url = input("Enter web site url: ")
                        dns_lookup = "http://api.hackertarget.com/dnslookup/?q=" + input_url
                        data = urlopen(dns_lookup).read()
                        pprint(data.splitlines())
                    except ConnectionError:
                        print("[-] Check Connection Error")
                        return self.WebHacking()

                elif menu == "2":
                    try:
                        input_url = input("Enter Web Site Url: ")
                        whois = "http://api.hackertarget.com/whois/?q=" + input_url
                        data = urlopen(whois).read()
                        pprint(data)
                    except ConnectionError:
                        print("Check Connection Error")
                        return self.WebHacking()

                elif menu == "3":
                    try:
                        print("Reverse DNSLookup")
                        reversedns_lookup = input("Enter The Target Url: ")
                        url = "https://api.hackertarget.com/reversedns/?q=" + reversedns_lookup
                        data = urlopen(url).read()
                        pprint(data.splitlines().format())
                    except ConnectionError:
                        print("[-] Check Connection Error")
                        return self.WebHacking()

                elif menu == "4":
                    try:
                        print("Subnet Lookup")
                        subnet_lookup = input("Enter The Target Url: ")
                        url = "https://api.hackertarget.com/subnetcalc/?q=" + subnet_lookup
                        data = urlopen(url).read()
                        pprint(data.splitlines())
                    except ConnectionError:
                        print("[-] Check Connection Error")
                        return self.WebHacking()

                elif menu == "5":
                    try:
                        print("GeoIP Lookup")
                        geoip_lookup = input("Enter The Target Url: ")
                        url = "http://api.hackertarget.com/geoip/?q=" + geoip_lookup
                        geodata = urlopen(url).read()
                        pprint(geodata.splitlines())
                    except ConnectionError:
                        print("[-] Check Connection Error")
                        return self.WebHacking()

                elif menu == "6":
                    try:
                        print("Extract Links")
                        extract_links = input("Enter The Target Url: ")
                        url = "https://api.hackertarget.com/pagelinks/?q=" + extract_links
                        eldata = urlopen(url).read()
                        pprint(eldata.splitlines())
                    except ConnectionError:
                        print("[-] Check Connection Error")
                        return self.WebHacking()

                elif menu == "7":
                    try:
                        print("Zone Tansfer")
                        zone_transfer = input("Enter The Target Url: ")
                        url = "https://api.hackertarget.com/zonetansfer/?q=" + zone_transfer
                        ztdata = urlopen(url).read()
                        pprint(ztdata.splitlines())
                    except ConnectionError:
                        print("[-] Check Connection Error")
                        return self.WebHacking()

                elif menu == "8":
                    try:
                        print("Http Headers")
                        http_headers = input('Enter Your Domain :')
                        url = "http://api.hackertarget.com/httpheaders/?q=" + http_headers
                        der = urlopen(url).read()
                        print(der)
                    except ConnectionError:
                        print("[-] Check Connection Error")
                        return self.WebHacking()

                elif menu == "9":
                    try:
                        print("Host Finder")
                        host_finder = input('Enter Your Domain :')
                        host = "http://api.hackertarget.com/hostsearch/?q=" + host_finder
                        finder = urlopen(host).read()
                        pprint(finder)
                    except ConnectionError:
                        print("[-] Check Connection Error")
                        return self.WebHacking()

                elif menu == "10":
                    try:
                        print("IP-Locater")
                        ip_locater = input('Enter Your IP Address :')
                        host = "http://ip-api.com/json/" + ip_locater
                        ipdata = urlopen(host).read()
                        pprint(ipdata)
                    except ConnectionError:
                        print("[-] Check Connection Error")
                        return self.WebHacking()

                elif menu == "11":
                    try:
                        print("TraceRoute")
                        trace_route = input('Enter Domain: ')
                        host = "http://api.hackertarget.com/findshareddns/?q=" + trace_route
                        dns = urlopen(host).read()
                        print(dns)
                    except ConnectionError:
                        print("[-] Check Connection Error")
                        return self.WebHacking()

                elif menu == "12":
                    try:
                        print("Host DNS Finder")
                        hostdns_finder = input('Enter Your Domain :')
                        gets = "https://api.hackertarget.com/mtr/?q=" + hostdns_finder
                        page = urlopen(gets).read()
                        print(page)
                    except ConnectionError as e:
                        print("[-] Check Connection Error", e)
                        return self.WebHacking()
                else:
                    print("[-] Check Connection Error")
                    return self.WebHacking()

        if menus == 8 or menus == "8":
            print("Admin Panel Finder")

            def AdminPanelFinder():
                print("Enter The Host URL eg.https://eg.com: ")
                url = input("Enter The Target URL: ")

                start = "Start Scanning"
                for s in start:
                    sys.stdout.write(s)
                    sys.stdout.flush()
                    time.sleep(0.1)

                file = open("admin_panel.txt", "r")
                try:
                    for link in file.read().splitlines():
                        curl = url + link
                        res = requests.get(curl)
                        if res.status_code == 200:
                            print("Admin Panel Found {}".format(curl))
                            print("*" * 15)
                        else:
                            print("Not Found")
                except:
                    print("Error")
                finally:
                    file.close()

            AdminPanelFinder()
            self.WebHacking()

        if menus == 9 or menus == "9":
            def XSSTester():
                print("-----[XSS Vulnerability Tester]-----")
                print("Usage: Target Url Should be http://example.com/input?q=")
                url = input("Enter Your Target Url to Scan: ")
                print("Scanning The Server URL Please Wait...!")

                vulnerable = []
                file = open("XssPayloads.txt", "r")
                for payload in file.read().splitlines():
                    lnk = url + payload
                    reqs = requests.get(lnk)
                    if payload.lower() in reqs.text.lower():
                        print("Site is vulnerable to: " + payload)

                        if payload not in vulnerable:
                            vulnerable.append(payload)
                        else:
                            pass
                file.close()

                print("[-] Available Payloads:")
                print("".join(vulnerable))
                XSSTester()
                return self.WebHacking()

        if menus == 10 or menus == "10":
            pass

        if menus == "23" or menus == 23:
            pass

    #################################
    #                               #
    #         Linux Hacking         #
    #                               #
    #################################

    def LinuxHacking(self):
        print("Liunux Hacking")
        linuxhackingmenus = input("""1: Linux Scanner
                                     2: Privilege Escalation
                                     3: Check Health
                                     4: Buffer Overflow Fuzzer
                                     5: System Checker """)

        print("Selected", linuxhackingmenus)

        if linuxhackingmenus == "1" or linuxhackingmenus == 1:
            print("[+] Linux Scaner")
            uname = os.system("uname -a")
            print(uname)

        def NetworkScanner(self):
            print("-------[Network Scanner]-------")
            try:
                request = scapy.ARP()
                print(request.show())
                print(request.summary())
                print("UUID:", hex(uuid.getnode()))
                print("MAC Address: ", end="")  # Getting MAC
                print(":".join(re.findall('..', '%12x' % uuid.getnode())))
                print("[+] Network Scanned Successfully")
            except:
                print("[-] Error, Import Scapy Module")
                NetworkScanner()

        def SystemScanner(self):
            print("-------[System Scanner]-------")
            if os.system("sudo uname -a"):
                pass
            else:
                print("[+] Scanned Sucessfully")

    #################################
    #                               #
    #        Windows Hacking        #
    #                               #
    #################################

    def WindowsHacking(self):
        print("[+] Windows Hacking")
        windowshackingmenus = input("""1: System Scanner
                                       2: Priviliage Escalation
                                       3: Network Scanner
                                       4: Check WIFI For Intruder""")
        print("Selected", windowshackingmenus)

    #################################
    #                               #
    #       Macintosh Hacing        #
    #                               #
    #################################

    def MacintoshHacking(self):
        print("[+] Macingtosh Hacking")
        MacintoshHackingMenus = input("""1: System Scanner
                                       2: Priviliage Escalation
                                       3: Network Scanner
                                       4: Check WIFI For Intruder""")
        print("Selected", MacintoshHackingMenus)

    #################################
    #                               #
    #         CRYPTOPGRAPHY         #
    #                               #
    #################################

    def ACryptography(self):
        print("[+] Cryptography")
        cryptographymenus = input("""1: Hash Generator
                                     2: Number System Conveter
                                     3: XOR Cipher | Encryption & Decryption
                                     4: Strong Password Generator
                                     5: Reverse Cipher""")
        print("Selected", cryptographymenus)

        class Cryptography:

            def hashGenerator(self):
                try:
                    print("Hash Generator")

                    print(
                        "Hash Generator (MD5, SHA1, SHA256, SHA384, SHA224, SHA1, SHA512)")
                    str = input("Enter String to Generate Hash: ")

                    result = hashlib.sha256(str.encode())
                    print("The Hexadecimal Format of SHA256 is : ")
                    print(result.hexdigest())
                    print(result.digest())
                    print("\r")

                    result = hashlib.sha384(str.encode())
                    print("The Hexadecimal Format of SHA384 is : ")
                    print(result.hexdigest())
                    print(result.digest())
                    print("\r")

                    result = hashlib.sha224(str.encode())
                    print("The Hexadecimal Format of SHA224 is : ")
                    print(result.hexdigest())
                    print("\r")

                    result = hashlib.sha512(str.encode())
                    print("The Hexadecimal Format of SHA512 is : ")
                    print(result.hexdigest())
                    print("\r")

                    result = hashlib.sha1(str.encode())
                    print("The Hexadecimal Format of SHA1 is : ")
                    print(result.hexdigest())

                except KeyboardInterrupt as e:
                    print("Pressed CTRL+C", e)

            def NumberSystemConverter(self):
                print("-----[Number System Converter]-----")
                print(
                    "Convert Any Number System to Bin, Hex, Octal, Deci format & Revering Manner")
                convert_options = input(
                    """-----[Select Option That You want to Convert]-----\n [1] Bin to Octa\n [2] Bin to Hexa\n [3] Bin to
                    Octal\n [4] Bin to Ascii\n [5] Hex To Binary\n [6] Hex to Decimal\n [7] Decimal To Binary\n [8] Decimal
                    to Binary\n [9] Decimal to Octal\n [10] Octal to Decimal\n [11] Octal to Binary \n Enter The Option :""")
                for option in convert_options:
                    if option == "1":
                        try:
                            print("[+] Binary to Octa")
                            binary = input("Enter number in Binary Format: ")
                            temp = int(binary, 2)
                            print(binary, "in Octal =", oct(temp))
                        except ValueError as ve:
                            sys.stderr.write("Value Error", ve)

                    elif option == "2":
                        try:
                            print("[+] Binary to Hexa")
                            binaryhexa = input(
                                "Enter Number in Binary Format: ")
                            temphexa = int(binaryhexa, 2)
                            print(binaryhexa, "in Hexa =", hex(temphexa))
                        except ValueError as ve:
                            sys.stderr.write("Value Error", ve)

                    elif option == "3":
                        print("[+] Binary to Ocatal")
                        binaryocta = int(
                            input("Enter number in Binary Format: "))
                        print(binaryocta, "in Octal =", oct(binaryocta))

                    elif option == "4":
                        try:
                            print("[+] Binary to Ascii Text")
                            text2 = ("Enter a Binary Value: ")
                            bintoasciio = int.from_bytes(text2.encode(), 2)
                            print(bintoasciio)
                        except ValueError as ve:
                            sys.stderr.write("value Error", ve)

                    elif option == "5":
                        print("Hexa to Binary")
                        ini_string = input("Enter Your Hexa Value : ")
                        print("[+] Initialized Value", ini_string)
                        res = "{0:08b}".format(int(ini_string, 16))
                        print("[+] The Binary Value is : ", str(res))

                    elif option == "6":
                        print("Hex to Decimal")
                        num_hex = input("Enter Your Hexa Value : ")
                        num_dec = int(num_hex, 16)
                        print('Value in hex:', num_hex)
                        print('Value in decimal:', num_dec)

                    elif option == "7":
                        print("Decimal to Hex")
                        decimal = int(input("Enter The Decimal Value : "))
                        hex = hex(decimal)
                        print("Value in Hex : ", hex)

                    elif option == "8":
                        print("Decimal to Binary")
                        decimal = int(input("Enter The Decimal Value : "))
                        bin = bin(decimal)
                        print("Value in Bin : ", bin)

                    elif option == "9":
                        print("Decimal to Octal")
                        decimal = int(input("Enter The Decimal Value : "))
                        oct = oct(decimal)
                        print("Value of Octal : ", oct)

                    elif option == "10":
                        print("Octal to Decimal")  # 0o12
                        print("Enter the Octal Number: ", end="")
                        onum = input()
                        dnum = int(onum, 8)
                        print("\nEquivalent Decimal Value =", dnum)

                    elif option == "11":
                        print("Octal to Binary")  # 0o12
                        print("Enter Octal Number: ", end="")
                        onum = input()
                        bnum = int(onum, 8)
                        bnum = bin(bnum)
                        print("\nEquivalent Bin Value =", bnum)

            def XORCipher(self):
                print("XOR Cipher Encoder | Decoder")

            def StrongPasswordGenerator(self):
                print("Strong Password Generator")

            def ReverseCipher(self):
                message = input("Enter Message: ")
                translated = ''  # cipher text is stored in this variable
                i = len(message) - 1

                while i >= 0:
                    translated = translated + message[i]
                    i = i - 1
                    print("The cipher text is : ", translated)

            def PasswordHashingForAuthentication(self):
                def hash_password(password):
                    salt = uuid.uuid4().hex
                    return hashlib.sha256(salt.encode() + password.encode()).hexdigest() + ':' + salt

                def check_password(hashed_password, user_password):
                    password, salt = hashed_password.split(':')
                    return password == hashlib.sha256(salt.encode() + user_password.encode()).hexdigest()

                new_pass = input('Please Enter a Password: ')
                hashed_password = hash_password(new_pass)
                print('The String Stored in Database: ' + hashed_password)
                old_pass = input(
                    'Now please enter the password again to check: ')

                if check_password(hashed_password, old_pass):
                    print('You Have Entered Correct Password')
                else:
                    print('Passwords Do Not Match')

            def CeaserCipher(self):
                print("[+] Extracting")
                print("[+] Developing")

        if __name__ == "__main__":
            cryptography = Cryptography()
            if cryptographymenus == 1 or cryptographymenus == "1":
                cryptography.hashGenerator()
            if cryptographymenus == 2 or cryptographymenus == "2":
                cryptography.NumberSystemConverter()
            if cryptographymenus == 3 or cryptographymenus == "3":
                cryptography.XORCipher()
            if cryptographymenus == 4 or cryptographymenus == "4":
                cryptography.StrongPasswordGenerator()
                self.ACryptography()

    #################################################
    #                                               #
    #  Exploit Development and Reverse Engineering  #
    #                                               #
    #################################################

    def ExploitDevelopmentandReverseEngineering(self):
        print("[+] Exploit Development and Reverse Engineering")
        ExploitDevelopmentandReverseEngineeringmenus = input("""
                                     1: Buffer Overflow | Heap Overflow | Stack Overflow
                                     2: Auto C C++ Vulnerable Code Generator""")
        print("Selected", ExploitDevelopmentandReverseEngineeringmenus)

        class ExploitDevelopmentandReverseEngineering:
            """def BufferOverflowFuzzer(self):
                                                    host = "10.10.260.263"
                                                    port = 9999

                                                    buffer = "A" * 5000


                                                    try:
                                                        print("connecting...!")
                                                        s.socket.sokcet(socket.AF_INET, socket.SOCK_STREAM)
                                                        s.connect((host, port))

                                                        s.recv(1024)
                                                        s.send(buffer+, "\r\n")
                                                        print("Buffer Sent....")
                                                        s.recv(1024)


                                                    except:
                                                        print("BUffer Faild")
                                                        sys.exit(0)



                                                    finally:
                                                            s.close()"""

            def GenerateSampleVulnerableCode(self):
                sample_code = ("""
                        #include <stdio.h>
                        #include <string.h>

                        void doit(void)
                        {
                                char buf[8];

                                gets(buf);
                                  printf("%s\n", buf);
                        }

                        int main(void)
                        {
                                printf("So... The End...\n");
                                doit();
                                printf("or... maybe not?\n");

                                return 0;
                        }

                    """)
                print(sample_code)

            def GenerateShellcode(self):
                pass

            def ShellCodeEncoderDecoder(self):
                pass

        if __name__ == "__main__":
            exploit_developmentand_reverse_engineering = ExploitDevelopmentandReverseEngineering()
            exploit_developmentand_reverse_engineering.BufferOverflow()

    #################################
    #                               #
    #        Malware Analysis       #
    #                               #
    #################################

    def MalwareAnalysis(self):
        print("[+] Malware Analysis")
        MalwareAnalysisMenus = input("""
                                       1: Obfuscation
                                       2: Traffic | Packet Capturing
                                       3: Auto Analyse
                                       4: Strings Decoder""")
        print("Selected", MalwareAnalysisMenus)

        if MalwareAnalysisMenus == 1 or MalwareAnalysisMenus == "1":
            def convert_bytes(num):
                for x in ['bytes', 'KB', 'MB', 'GB', 'TB']:
                    if num < 1024.0:
                        return "%3.1f %s" % (num, x)
                    num /= 1024.0

            def file_size(file_path):
                if os.path.isfile(file_path):
                    file_info = os.stat(file_path)
                    return convert_bytes(file_info.st_size)

            try:
                f = input(
                    "\n\n [*] Enter file name which you want to scan :- ")

                print('\n')
                try:
                    fp = open(f)
                    fp.close()
                    key = ""
                except IOError:
                    print("\n [-] There is a no file like '", f, "'")
                    exit()

                print('\n\n')

                print('--------------------.')
                print(' [*] Basic Analysis |')
                print('--------------------`')
                print('\n')
                IMAGE_FILE_MACHINE_I386 = 332
                IMAGE_FILE_MACHINE_IA64 = 512
                IMAGE_FILE_MACHINE_AMD64 = 34404

                fl = open(f, "rb")

                s = fl.read(2)
                if s != "MZ":
                    print(" Not an EXE file")
                else:
                    fl.seek(60)
                    s = fl.read(4)
                    header_offset = struct.unpack("<L", s)[0]
                    fl.seek(header_offset+4)
                    s = fl.read(2)
                    machine = struct.unpack("<H", s)[0]

                    if machine == IMAGE_FILE_MACHINE_I386:
                        print(" Image Type = IA-32 (32-bit x86)")
                        fp = open('PE Analysis.txt', 'a')
                        fp.write("Image Type = IA-32 (32-bit x86)")
                        fp.write('\n\n')
                        fp.close()
                    elif machine == IMAGE_FILE_MACHINE_IA64:
                        print("Image Type = IA-64 (Itanium)")
                        fp = open('PE Analysis.txt', 'a')
                        fp.write("Image Type = IA-64 (Itanium)")
                        fp.write('\n\n')
                        fp.close()
                    elif machine == IMAGE_FILE_MACHINE_AMD64:
                        print(" Image Type = AMD64 (64-bit x86)")
                        fp = open('PE Analysis.txt', 'a')
                        fp.write("Image Type = AMD64 (64-bit x86)")
                        fp.write('\n\n')
                        fp.close()
                    else:
                        print(" Unknown architecture")

                    print('\n File Size = ' + file_size(f))
                    print('\n Last Modified Date = %s' %
                          time.ctime(os.path.getmtime(f)))
                    print('\n Created Date = %s' %
                          time.ctime(os.path.getctime(f)))

                    fp = open('PE Analysis.txt', 'a')
                    fp.write('File Size = ' + file_size(f))
                    fp.write('\n\nLast Modified Date: %s' %
                             time.ctime(os.path.getmtime(f)))
                    fp.write('\n\nCreated Date: %s' %
                             time.ctime(os.path.getctime(f)))
                    fp.write('\n')
                    fp.write('\n')
                    fp.close()
                fl.close()

                try:
                    print("\n\n-----------------.")
                    print(' [*] PE Analysis |')
                    print('-----------------`')
                    pe = pefile.PE(f)
                    print('\n ImageBase = ' + hex(pe.OPTIONAL_HEADER.ImageBase))
                    print('\n Address Of EntryPoint = ' +
                          hex(pe.OPTIONAL_HEADER.AddressOfEntryPoint))
                    print('\n Number Of RvaAndSizes = ' +
                          hex(pe.OPTIONAL_HEADER.NumberOfRvaAndSizes))
                    print('\n Number Of Sections = ' +
                          hex(pe.FILE_HEADER.NumberOfSections))

                    fp = open('PE Analysis.txt', 'a')

                    fp.write('ImageBase = ' +
                             hex(pe.OPTIONAL_HEADER.ImageBase))
                    fp.write('\n\nAddress Of EntryPoint = ' +
                             hex(pe.OPTIONAL_HEADER.AddressOfEntryPoint))
                    fp.write('\n\nNumber Of RvaAndSizes = ' +
                             hex(pe.OPTIONAL_HEADER.NumberOfRvaAndSizes))
                    fp.write('\n\nNumber Of Sections = ' +
                             hex(pe.FILE_HEADER.NumberOfSections))
                    fp.write('\n')
                    fp.write('\n')

                    # List Import Sections"
                    print('\n [*] Listing Sections...\n')
                    fp.write('\n')
                    fp.write('\n')
                    fp.write('[*] Listing Sections \n\n')

                    for section in pe.sections:
                        print('\t' + section.Name.decode('utf-8'))
                        print("\t\tVirtual Address: " +
                              hex(section.VirtualAddress))
                        print("\t\tVirtual Size: " +
                              hex(section.Misc_VirtualSize))
                        print("\t\tRaw Size: " + hex(section.SizeOfRawData))
                        fp.write('\n ' + section.Name.decode('utf-8'))
                        fp.write("\n\n\tVirtual Address: " +
                                 hex(section.VirtualAddress))
                        fp.write("\n\n\tVirtual Size: " +
                                 hex(section.Misc_VirtualSize))
                        fp.write("\n\n\tRaw Size: " +
                                 hex(section.SizeOfRawData))

                        print('\n')

                    # List Import DLL"
                    fp.write('\n')
                    fp.write('\n')
                    fp.write('\n')
                    fp.write('\n[*] Listing imported DLLs...')
                    fp.write('\n')
                    print(' [*] Listing imported DLLs...\n')
                    for lst in pe.DIRECTORY_ENTRY_IMPORT:
                        print('\n '+lst.dll.decode('utf-8'))
                        fp.write('\n'+lst.dll.decode('utf-8'))
                        for s in lst.imports:
                            print("\t - %s at 0x%08x" %
                                  (unicode(s.name).decode('utf-8'), s.address))
                            fp.write('\n\n' + "\t - %s at 0x%08x" %
                                     (unicode(s.name).decode('utf-8'), s.address) + '\n',)

                    print('\n [*] Listing Header Members...')

                    fp = open('PE Analysis.txt', 'a')
                    fp.write('\n')
                    fp.write('\n')
                    fp.write('\n')
                    fp.write('\n[*] Listing Header Members...')
                    fp.write('\n')

                    for headers in pe.DOS_HEADER.dump():
                        print('\n\t' + headers)
                        fp.write('\n')
                        fp.write('\n\t' + headers)

                    print('\n')
                    fp.close()

                    for ntheader in pe.NT_HEADERS.dump():
                        print('\n\t' + ntheader)
                        fp = open('PE Analysis.txt', 'a')
                        fp.write('\n')
                        fp.write('\n\t' + ntheader)

                    print('\n [*] Listing Optional Headers...')

                    fp = open('PE Analysis.txt', 'a')
                    fp.write('\n')
                    fp.write('\n')
                    fp.write('\n')
                    fp.write('\n[*] Listing Optional Headers...')
                    fp.write('\n')
                    for optheader in pe.OPTIONAL_HEADER.dump():
                        print('\n\t' + optheader)
                        fp.write('\n')
                        fp.write('\n\t' + optheader)

                    print('\n\n ***********************')
                    print(' * See PE Analysis.txt *')
                    print(' ***********************')

                except:
                    print('\n [-] ' + f + ' DOS Header magic not found.')

            #### Strings Analysis Extracting Atrings From File ####
                print(' \n\n\n\n----------------------.')
                print(' [*] Strings Analysis |')
                print('----------------------`')
                srt = open(f, "rb")
                data = srt.read()
                unicode_str = re.compile(u'[\u0020-\u007e]{3,}', re.UNICODE)
                myList = unicode_str.findall(data)
                fp = open('strings.txt', 'a')

                for p in myList:
                    fp.write(p + '\n')
                fp.close()

                print('\n\n *******************')
                print(' * See Strings.txt *')
                print(' *******************')
                #### Count Hash Value###
                print(
                    '\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')
                with io.open(f, mode="rb") as fd:
                    content = fd.read()
                    md5 = hashlib.md5(content).hexdigest()

                print(' [*] MD5 Hash Value Of Your File Is :- ', md5)
                print(
                    '++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')

                #####Virus Total Analysis#####

                #####Asking For Key#####
                print('\n\n\n\n--------------------------.')
                print(' [*] Virus Total Analysis |')
                print('--------------------------`')

                #####Main Program Function#####
                def main():
                    VT_Request(key, md5.rstrip())

                ####Upload Hash On Virus Total####
                def VT_Request(key, hash):

                    if len(key) == 64:
                        try:
                            params = {'apikey': key, 'resource': hash}
                            url = requests.get(
                                'https://www.virustotal.com/vtapi/v2/file/report', params=params)
                            json_response = url.json()
                            # print json_response

                            response = int(json_response.get('response_code'))
                            if response == 0:
                                print('[-] ' + f + ' [' + hash +
                                      '] is not in Virus Total')
                                file = open('VT Scan.txt', 'a')
                                file.write(
                                    '[-] ' + f + ' [' + hash + '] is not in Virus Total')
                                file.write('\n')
                                file.close()
                            elif response == 1:
                                positives = int(json_response.get('positives'))
                                if positives == 0:
                                    print('[-] ' + f +
                                          ' [' + hash + '] is not malicious')
                                    file = open('VT Scan.txt', 'a')
                                    file.write(
                                        '[-] ' + f + ' [' + hash + '] is not malicious')
                                    file.write('\n')
                                    file.close()
                                else:

                                    sha1 = json_response.get('sha1')
                                    positives = int(
                                        json_response.get('positives'))
                                    total = int(json_response.get('total'))
                                    sha256 = json_response.get('sha256')
                                    scans = str(json_response.get('scans'))

                                    print('\n [*] Malware Hit Count ' +
                                          str(positives) + '/'+str(total))
                                    print('\n [*] Sha1 Value = ' + sha1)
                                    print('\n [*] Sha256 Value = ' + sha256)
                                    # print '\n Scans = ' + str(scans)

                                    print('\n [*] ' + f +
                                          ' ['+hash+']' + ' is malicious')
                                    file = open('VT Basic Scan.txt', 'a')
                                    file.write(
                                        '[*] ' + f + ' [' + hash + '] is malicious.')
                                    file.write('\n\n')
                                    file.write(
                                        '\n[*] Malware Hit Count ' + str(positives) + '/'+str(total))
                                    file.write('\n[*] MD5 Value = ' + md5)
                                    file.write('\n[*] Sha1 Value = ' + sha1)
                                    file.write(
                                        '\n[*] Sha256 Value = ' + sha256)
                                    file.write('\n\n')
                                    file.close()
                                    file = open('VT Scan.csv', 'a')
                                    file.write(
                                        'AV Name,Detection,AV Version,Malware Name,AV Updated Date')
                                    file.write('\n')
                                    file.write(str(scans).replace('}, u', '\n').replace(' u', '').replace('{', '').replace(': u', ' = ').replace("'", "").replace(
                                        '}}', '').replace(' = detected: ', ',').replace('result:', '').replace('update:', '').replace('uBkav', 'Bkav') + '\n')
                                    file.write('\n')
                                    file.close()
                            else:
                                print(
                                    hash + ' [-] could not be searched. Please try again later.')
                            print('\n\n *******************')
                            print(' * See VT Scan.csv *')
                            print(' *******************')
                        except Exception as e:
                            print(
                                '\n [-] Oops!!, Somthing Wrong Check Your Internet Connection')
                    else:
                        print(" [-] There is something Wrong With Your API Key.")
                        exit()

                if __name__ == '__main__':
                    main()

            except:
                print('\n\n [-] Oops!, Program Halted')

    #################################
    #                               #
    #     Forensic Investigation    #
    #                               #
    #################################

    def ForensicInvestigation(self):
        class ForensicInvestigations(object):
            print("[+] Forensic Investigation")
            ForensicInvestigationMenus = input("""
               1: Image Forensic
               2: Image Location Extractor (ExifData)
               3: IPAddress Extraction
               4: PDF Information Extraction
               5: Indexing for Forensics
            """)

            print("Selected", ForensicInvestigationMenus)

            if ForensicInvestigationMenus == int(1) or ForensicInvestigationMenus == str("1"):
                def ImageForensicviaLibrary(self):
                    imagepath = input("Enter Path: ")
                    im = Image.open(imagepath, 'r')
                    pix_val = list(im.getdata())
                    pix_val_flat = [x for sets in pix_val for x in sets]
                    print(pix_val_flat)
                    self.ImageForensicviaLibrary()

            if ForensicInvestigationMenus == int(2) or ForensicInvestigationMenus == str("2"):
                try:
                    print("[+] Network Forensics")
                    pcap = scapy.rdpcap("smtp.pcap")
                    print(pcap.conversations())
                    print(pcap.display())
                except ConnectionError as e:
                    print("[-] Please Install Scapy Module ie: pip3 install scapy")
                except FileNotFoundError as e:
                    print("[-] Please Feed The Pcap File")
                finally:
                    self.PencryptMenus()

            if ForensicInvestigationMenus == int(1) or ForensicInvestigationMenus == str("1"):
                pass

            if ForensicInvestigationMenus == int(1) or ForensicInvestigationMenus == str("1"):
                pass
                ForensicInvestigationMenus = scapy.display()


if __name__ == "__main__":
    Pencrypt = Pencrypt()
    Pencrypt.PencryptMenus()
    Pencrypt.WebHacking()
    Pencrypt.WindowsHacking()
    Pencrypt.ACryptography()
    Pencrypt.ForensicInvestigation()
